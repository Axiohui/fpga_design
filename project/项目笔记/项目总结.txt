准备工作：（可行性、扩展性）
1. 项目需求以及核心硬件（比如FPGA和CMOS类型等）
2. 解决方案（框架）：需要的每一个模块（硬件）以及功能以及彼此的联系。迭代开发：粗糙到精细（实时修改）。
3. 技术参数（文档：了解硬件{系统参数、功能部件以及工作流程、example}）

是否匹配：

1. 传输速率（吞吐量）：实际传输的比特数；或是可用带宽
2. 时钟频率：每个器件的时钟域（包括频率、相位；单时钟源、多时钟源）
3. 带宽 = 传输频率（一般是一个时钟频率）* 数据大小（bit）
4. 电平标准（TTL/CMOS等）

若不匹配：
- 采集（1、2、3）> 发送（1、2、3）正常；但若存在充足的时间（延迟）来处理发送过程，也是可以小于的。

动态存储：（数据）
- FIFO：缓存的一种；为先入先出访问存储器；实际当出现跨（1、2、3）时都需要；还要考虑缓存的大小（比如考虑图像大小{至少两个}、传输块大小{一次brust}）、位宽、深度（自行设置）
- DDR： 缓存的一种；为动态随机访问存储器；实际当出现跨（1、2、3）时都需要；还要考虑缓存的大小、位宽、深度（自行设置）
静态存储：（配置文件、程序文件等）
- ROM/FLASH

项目需求：
1. CMOS产生的图像可以通过USB实时的传输到上位机进行显示（视频流）
   {隐：上位机可以控制CMOS摄像头修改相应的寄存器，以改变摄像头的拍摄功能}
2. CMOS产生的图片（包含一些图片参数）可以存储在SD中，其中CMOS摄像头每隔1秒产生一张图片
   {隐：图片参数包含 积分时间（为什么变？在什么情况下变（FPGA控制还是CMOS控制（上位机还是FPGA根据当前情况调整））/怎么控制？）等CMOS摄像头自己产生的数据，也包含 GPS模块产生的地理数据（这些可以放在CMOS模块初始化阶段准备）}


开发：（关键点）
- 每个模块：相当于数据结构的元素
- 接口：相当于数据结构的操作
- 如何将各个模块 功能的、系统的互连？

- 每个模块都是可以充当黑盒的，但是相应的接口参数是什么？
- 接口参数的交互（接口逻辑）：信号（时钟、数据线、地址线、复位、使能等）如何传输（互连）？传输的方式是什么？（同步{选取哪种同步方式？}、异步；串行、并行{是一根线还是多根线？}）？信号之间如何进行转换（数据位宽、地址深度、时钟（频率和相位）（单源还是多源）、状态机（复位和使能））？

1. 开发并测试各个模块（by 测试用例）
2. 将各个模块组合在一起并测试（by 测试用例 with 实现功能）

测试：遇到某个问题{ is error not warning }发生时，如何处理？
- 确定问题发生在哪？（检测各个模块的接口参数是否正常： by 测试用例）
- 分析问题的原因（采样点、软件工具、时序图）
- 如何修改接口和接口逻辑？
- 改正，并再一次测试

之前的问题：LVDS的传输速率（吞吐量）到底是多少？即：工作时钟是不是可变？可配置？


